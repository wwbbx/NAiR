// Generated by CoffeeScript 1.6.3
(function() {
  var EmuSourceDir, ForceOption, OutputJsonFile, emuSourceDir, forceOverwrite, fs, jsonContent, outputJsonFile, path, tempJsonFile;

  fs = require('fs');

  path = require('path');

  ForceOption = false;

  EmuSourceDir = "";

  OutputJsonFile = "";

  module.exports.ParseParameter = function() {
    if (process.argv.length < 4) {
      return false;
    }
    this.EmuSourceDir = process.argv[2];
    this.OutputJsonFile = process.argv[3];
    if (process.argv.length > 4) {
      if (process.argv[4] === "-f") {
        this.ForceOption = true;
      }
    }
    return true;
  };

  module.exports.IsValidEmuTestCardDir = function(emuDirName) {
    var dsheet, tcard;
    dsheet = path.join(emuDirName, "dsheet.tpe");
    if (!fs.existsSync(dsheet)) {
      return false;
    }
    tcard = path.join(emuDirName, "tcard.tpe");
    if (!fs.existsSync(tcard)) {
      return false;
    }
    return true;
  };

  module.exports.ConvertEmuTestCard = function(emuDirName) {
    return "{name:'this is testing'}";
  };

  module.exports.GetTempFileName = function() {
    var crypto, fileName, os;
    crypto = require('crypto');
    os = require('os');
    fileName = crypto.randomBytes(4).readUInt32LE(0).toString();
    return path.join(os.tmpdir(), fileName);
  };

  module.exports.SaveFileContent = function(fileName, content) {
    return fs.writeFileSync(fileName, content);
  };

  module.exports.CopyFile = function(source, target, forceOverwrite) {
    if (fs.existsSync(target) && !forceOverwrite) {
      console.log('target file exist and no force option is specified.');
      console.log('target file will not be changed.');
      return;
    }
    if (!fs.existsSync(target)) {
      return fs.createReadStream(source).pipe(fs.createWriteStream(target));
    }
  };

  module.exports.DeleteFile = function(fileToDelete) {
    return fs.unlink(fileToDelete);
  };

  if (!this.ParseParameter(process.argv)) {
    console.log("Please call this utility using: ");
    console.log("node ConvertEmuToJson.js <EmuTestCardDir> <OutputJsonFile> [-f]");
    return;
  }

  emuSourceDir = this.EmuSourceDir;

  outputJsonFile = this.OutputJsonFile;

  if (!fs.existsSync(emuSourceDir)) {
    console.log("Given EMU Test Card Folder: " + emuSourceDir + " doesn't exist.");
    console.log("Converter can't proceed.");
    return;
  }

  if (!this.IsValidEmuTestCardDir(emuSourceDir)) {
    console.log("" + emuSourceDir + " is not valid EMU Test Card directory.");
    console.log("Converter can't proceed");
    return;
  }

  jsonContent = this.ConvertEmuTestCard(emuSourceDir);

  tempJsonFile = this.GetTempFileName();

  this.SaveFileContent(tempJsonFile, jsonContent);

  forceOverwrite = this.ForceOption;

  if (fs.existsSync(this.outputJsonFile) && !forceOverwrite) {
    console.log("Target JSON file exists: " + outputJsonFile + " 	and user did not use -f option to overwrite");
    return;
  }

  this.CopyFile(tempJsonFile, outputJsonFile, forceOverwrite);

  this.DeleteFile(tempJsonFile);

}).call(this);

/*
//@ sourceMappingURL=ConvertEmuToJson.map
*/
